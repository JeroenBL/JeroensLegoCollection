@using BlazingLego.Components
@using Blazored.Toast.Configuration
@inherits LayoutComponentBase
@inject NavigationManager _navigationManager

<PageTitle>@title</PageTitle>

<CascadingValue Value=@IsSetOnDisplay>
<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="20"
                />
                
<nav class="navbar navbar-expand-lg navbar-light bg-light">
  <div class="container-fluid">
    <a class="navbar-brand">@title</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarScroll" aria-controls="navbarScroll" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarScroll">
      <ul class="navbar-nav me-auto my-2 my-lg-0 navbar-nav-scroll" style="--bs-scroll-height: 100px;">
        <li class="nav-item">
          <button type="button" class="btn btn-secondary" @onclick="(async () => await AddLegoSet())"><span class="oi oi-plus"></span>
            Add Lego Set
          </button>
        </li>
      </ul>
      <form class="d-flex">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="IsSetOnDisplay" @onchange="eventArgs => { CheckBoxOnDisplay(eventArgs.Value); }">
            <label class="form-check-label" for="IsSetOnDisplay">Show only on display</label>
        </div> 
      </form>
    </div>
  </div>
</nav> 
<div class="page">
    <main>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>
</CascadingValue>

@code {
    [CascadingParameter] 
    IModalService Modal { get; set; }

    [Parameter]
    public bool IsSetOnDisplay { get; set; }

    string title = "Jeroen's lego collection";

    public void CheckBoxOnDisplay(object checkedValue)
    {
        if ((bool)checkedValue)
        {
            IsSetOnDisplay = true;
        }
        else
        {
            IsSetOnDisplay = false;
        }
    }

    private async Task AddLegoSet()
    {
        var confirmationModal = Modal.Show<LegoSetModal>();
        var result = await confirmationModal.Result;
        _navigationManager.NavigateTo("/", forceLoad: true);
    }
}