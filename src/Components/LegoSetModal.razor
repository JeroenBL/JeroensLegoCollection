@using BlazingLego.Data.Models
@using BlazingLego.Data.Services
@using Microsoft.AspNetCore.Mvc
@using Newtonsoft.Json

@inject LegoService _legoService
@inject NavigationManager _navigationManager;
@inject JsonDataService _jsonDataService;
@inject IJSRuntime _jsRuntime;
@inject IToastService _toastService;

@{
    var img = "";
    if (Id == null)
    {
        <div class="container text-center">
            <h3>Add new lego set</h3>
        </div>
    }
    else
    {
        <div class="container text-center">
            <h3>Edit lego set</h3>
        </div>
        img = $"https://img.bricklink.com/ItemImage/SN/0/{legoSet.SetNumber}-1.png";
    }
}

<div class="container">
    <div class="row">
        <div class="col">
            <img src="@img" class="rounded mx-auto d-block" width="100">
        </div>
        <EditForm Model="@legoSet" OnValidSubmit="HandleOnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="setnumber">Set number</label>
                @if(Id == null)
                {
                    <InputText id="setNumber" @bind-Value="@legoSet.SetNumber" class="form-control" placeholder="10221" required="" />
                    <small id="formHelp" class="form-text text-muted">The set number will be validated against all available lego sets</small>
                }
                else
                {
                    <div class="input-group-text">@legoSet.SetNumber</div>   
                }
            </div>            

            @if(Id != null){
                <div class="form-group">
                    <label for="description">Description</label>
                     <div class="input-group-text">@legoSet.Description</div>
                </div>

                <div class="form-group">
                    <label for="pieces">Total parts</label>
                    <div class="input-group-text">@legoSet.TotalParts</div>
                </div>   
                       
                <div class="form-group">
                    <label for="year-released">Year released</label>
                    <div class="input-group-text">@legoSet.YearReleased</div>
                </div>        
            
                <div class="form-group">
                    <label for="link">Url</label>
                    <InputText id="link" @bind-Value="@legoSet.Link" class="form-control" />
                    <button type="button" class="btn btn-primary" @onclick="CopyTextToClipboard">Copy</button>
                </div>
            }
            <br />

            <div class="form-group">
                <label class="col-form-label" for="year-acquired">Year acquired</label>
                <InputText id="year-acquired" @bind-Value="@legoSet.YearAcquired" class="form-control"/>
                <small id="formHelp" class="form-text text-muted">If left empty, the lego set will be placed on the wish list!</small>
            </div>

            <div class="form-group">
                <label for="price">Price</label>
                <InputText id="price" @bind-Value="@legoSet.Price" class="form-control"/>
            </div>
            
            <div class="form-check">
                <label for="display">On display</label>
                <input class="form-check-input" type="checkbox" value="" id="onDisplay" @bind="@onDisplay">
            </div>
            
             <div class="row mt-3">
                <div class="col text-center">
                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-secondary" @onclick="(async () => await ModalInstance.CancelAsync())">Cancel</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter] 
    BlazoredModalInstance ModalInstance { get; set; }

    [Parameter] 
    public int? Id { get; set; }

    public bool onDisplay { get; set; }

    public LegoSet legoSet = new LegoSet();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            legoSet = _legoService.Get(Id.Value);
            if (legoSet.IsOnDisplay == "true")
            {
                onDisplay = true;
            }
            else
            {
                onDisplay = false;
            }
        }
    }

    private async Task HandleOnValidSubmit()
    {
        var jsonLegoData = _jsonDataService.GetLegoSet(legoSet.SetNumber);
        SetLegoSetProperties(jsonLegoData); 

        if(onDisplay == true)
        {
            legoSet.IsOnDisplay = "true";
        }
        else
        {
            legoSet.IsOnDisplay = "false";
        }

        if (Id == null)
        {
            _legoService.Create(legoSet);
        }
        else
        {
            legoSet.Id = Id.Value;
            _legoService.Update(legoSet);
        }

        await ModalInstance.CloseAsync();
    }

    private void SetLegoSetProperties(LegoSet set)
    {      
        legoSet.Description = set.Description;
        legoSet.Link = $"https://rebrickable.com/sets/{set.SetNumber}";                 
        legoSet.TotalParts = set.TotalParts;
        legoSet.Image = $"https://img.bricklink.com/ItemImage/ON/0/{set.SetNumber}.png";
        legoSet.YearReleased = set.YearReleased;
    }

    private async Task CopyTextToClipboard()
    {
        await _jsRuntime.InvokeVoidAsync("copyClipboard");
    }
}