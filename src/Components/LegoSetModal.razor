@using BlazingLego.Data.Models
@using BlazingLego.Data.Services

@inject LegoService _legoService

@if (id == null)
{
    <div class="container text-center">
        <h3>Add new lego set</h3>
    </div>
    imageSource = "/assets/mini.png";
}
else
{
    <div class="container text-center">
        <h3>Edit lego set</h3>
    </div>
    imageSource = "/assets/worker.png";
}

<div class="container">
    <div class="row">
        <div class="col">
            <img src="@imageSource" class="rounded mx-auto d-block" width="100">
        </div>
        <EditForm Model="@legoSet">

            <div class="form-group">
                <label for="setnumber">Set number</label>
                <InputText id="title" @bind-Value="@legoSet.SetNumber" class="form-control" />
            </div>

            <div class="form-group">
                <label for="description">Description</label>
                <InputText id="description" @bind-Value="@legoSet.Description" class="form-control" />
            </div>

            <div class="form-group">
                <label for="pieces">Pieces</label>
                <InputText id="pieces" @bind-Value="@legoSet.Pieces" class="form-control"/>
            </div>   
            
            <div class="form-group">
                <label for="price">Price</label>
                <InputText id="price" @bind-Value="@legoSet.Price" class="form-control" />
            </div>  

            <div class="form-group">
                <label for="link">Link</label>
                <InputText id="link" @bind-Value="@legoSet.Link" class="form-control" />
            </div>
            
            <div class="form-group">
                <label for="year-acquired">Year acquired</label>
                <InputText id="year-acquired" @bind-Value="@legoSet.Acquired" class="form-control" />
            </div>
            
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="" id="onDisplay" @bind="@onDisplay">
              <label class="form-check-label" for="onDisplay">
                On display
              </label>
            </div>
            
             <div class="row mt-3">
                <div class="col text-center">
                    <button type="submit" class="btn btn-primary" @onclick="(async () => await SetLegoSet())">Submit</button>
                    <button type="button" class="btn btn-secondary" @onclick="(async () => await ModalInstance.CancelAsync())">Cancel</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter] 
    BlazoredModalInstance ModalInstance { get; set; }

    [Parameter] 
    public int? id { get; set; }

    public bool onDisplay { get; set; }
    public string imageSource;

    public LegoSet legoSet = new LegoSet();
    
    private async Task SetLegoSet()
    {
        if(onDisplay == true)
        {
            legoSet.IsOnDisplay = "true";
        }
        else
        {
            legoSet.IsOnDisplay = "false";
        }
        
        if (id == null)
        {
            _legoService.Create(legoSet);
        }
        else
        {
            legoSet.Id = id.Value;
            _legoService.Update(legoSet);
        }
        
        await ModalInstance.CloseAsync();
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (id != null)
        {
            legoSet = _legoService.Get(id.Value);
            if (legoSet.IsOnDisplay == "true")
            {
                onDisplay = true;
            }
            else
            {
                onDisplay = false;
            }
        }
    }
}