@page "/wishlist"

@using BlazingLego.Data.Models
@using BlazingLego.Data.Services

@inject LegoService _legoService
@inject NavigationManager _navigationManager
@inject IToastService _toastService

<table class="table table-striped">
  <thead>
    <tr>
      <th scope="col">#</th>
      <th scope="col">Image</th>
      <th scope="col">Set number</th>
      <th scope="col">Description</th>
      <th scope="col">Total parts</th>
      <th scope="col">Link</th>
      <th scope="col">Year released</th>     
      <th scope="col"></th>
    </tr>
  </thead>
  <tbody>
    @if (!wishList.Any())
    {
        <tr>
            <th scope="row" colspan="5">No lego sets are currently on your wish list</th>
            </tr>
        } 
        else
        {
            foreach (var set in wishList)
            {
                <tr>
                    <th scope="row">@set.Id</th>
                    <td><img src="@set.Image" width="100" class="img-thumbnail"/></td>
                    <td>@set.SetNumber</td>
                    <td>@set.Description</td>
                    <td>@set.TotalParts</td>
                    <td>@set.Link</td>
                    <td>@set.YearReleased</td>
                    <td><button type="button" class="btn btn-sm btn-primary float-right" @onclick="(async () => await EditLegoSet(set.Id))"><i class="oi oi-pencil"></i></button></td>
                    <td><button type="button" class="btn btn-sm btn-danger float-right" @onclick="(async () => await ShowConfirmationModal(set.Id))"><i class="oi oi-trash"></i></button></td>
                </tr>
            }
        }
  </tbody>
</table>


@code {
    [CascadingParameter] 
    IModalService Modal { get; set; }  
      
    public List<LegoSet> wishList = new List<LegoSet>();

    protected override void OnInitialized()
    {
        wishList = _legoService.ListAll().Where(l => l.YearAcquired == "").ToList();
    }
    
    private async Task ShowConfirmationModal(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add("id", id);

        var confirmationModal = Modal.Show<ConfirmationModal>("Delete lego set?", parameters);
        var result = await confirmationModal.Result;

        if (!result.Cancelled)
        {
            _toastService.ShowSuccess("lego set has been deleted!", "Success!");
            _navigationManager.NavigateTo("/wishlist", true);
        }
    }

    private async Task EditLegoSet(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add("id", id);
        
        var legoSetModal = Modal.Show<LegoSetModal>(null, parameters);
        var result = await legoSetModal.Result;
    }
}
