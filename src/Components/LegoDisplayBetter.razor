@using BlazingLego.Data.Models

@inject NavigationManager _navigationManager
<nav class="navbar navbar-light bg-light">
  <div class="container-fluid">
    <a class="navbar-brand" href="#">Navbar</a>
  </div>
</nav>
<div class="container">
    @if(IsSetOnDisplay)
    { 
        FilterSetsOnDisplay(); 
    }
    @if(!string.IsNullOrEmpty(SearchString))
    {
        FilterSearchText(SearchString);
    }
  
    <div class="row gy-3">
        @foreach (var set in LegoSet)
        {
            var cardClass = "";
            @if(set.YearAcquired == ""){
                cardClass = "card text-white bg-warning mb-3";
            } else {
                cardClass = "card text-white bg-info mb-3";
            }
        <div class="col-sm-3">
            <div class="@cardClass h-100 w-300">
                <img class="card-img-top" src="@set.Image">
                <div class="card-body">
                    <h5 class="card-title">@set.SetNumber - @set.Description</h5>
                    <h6 class="card-subtitle mb-2 text-muted">Parts: @set.TotalParts</h6>
                    <h6 class="card-subtitle mb-2 text-muted">Year released: @set.YearReleased</h6>
                    <p class="card-text"><small class="text-muted"><span class="emphasized">Acquired: </span>@set.YearAcquired</small></p>
                    <div class="card-footer bg-transparent">
                        <a href="@set.Link" target="_blank" class="btn btn-light">More info</a>
                         <button type="submit" class="btn btn-light" @onclick="(async () => await EditLegoSet(set.Id))">Edit</button>
                    </div>
                </div>
            </div>
        </div>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public List<LegoSet> LegoSet { get; set; }

    [CascadingParameter]
    public bool IsSetOnDisplay { get; set; }

    [CascadingParameter]
    public string SearchString { get; set; }

    [CascadingParameter] 
    IModalService Modal { get; set; }

    public void FilterSetsOnDisplay()
    {
        LegoSet = LegoSet.Where(s => s.IsOnDisplay == "true").ToList();
    }

    public void FilterSearchText(string searchText)
    {
        LegoSet = LegoSet.Where(s => s.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase) || s.SetNumber.Contains(searchText)).ToList();
    }

    private async Task EditLegoSet(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add("id", id);

        var confirmationModal = Modal.Show<LegoSetModal>(null, parameters);
        var result = await confirmationModal.Result;
    }
}