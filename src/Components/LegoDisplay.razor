@using Data.Models
@inject NavigationManager _navigationManager

<div class="card-columns">
    @if(IsSetOnDisplay)
    { 
        FilterSetsOnDisplay(); 
    }

    @foreach (var set in LegoSet){
        var cardClass = string.Empty;
        var price = string.Empty;
        @if(set.YearAcquired == "No"){
           cardClass = "card text-white bg-warning mb-3";
           price = set.Price;
        } else {
            cardClass = "card text-white bg-info mb-3";
        }
        <div class="@cardClass">
            <img class="card-img-top" src="@set.Image">
            <div class="card-body">
                <h5 class="card-title">@set.SetNumber - @set.Description</h5>
                <h6 class="card-subtitle mb-2 text-muted">Parts: @set.TotalParts</h6>
                <h6 class="card-subtitle mb-2 text-muted">Year released: @set.YearReleased</h6>
                <p class="card-text"><small class="text-muted"><span class="emphasized">Acquired: </span>@set.YearAcquired</small></p>
                <small class="text-muted">@price</small>
                <div class="card-footer bg-transparent">
                    <a href="@set.Link" target="_blank" class="btn btn-light">More info</a>
                     <button type="submit" class="btn btn-light" @onclick="(async () => await EditLegoSet(set.Id))">Edit</button>
                </div>
            </div>
        </div>
    }
</div>


@code {
    [CascadingParameter]
    public List<LegoSet> LegoSet { get; set; }

    [CascadingParameter]
    public bool IsSetOnDisplay { get; set; }
    
    [CascadingParameter] 
     IModalService Modal { get; set; }

    public void FilterSetsOnDisplay()
    {
        LegoSet = LegoSet.Where(s => s.IsOnDisplay == "true").ToList();
    }

    private async Task EditLegoSet(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add("id", id);
        
        var confirmationModal = Modal.Show<LegoSetModal>(null, parameters);
        var result = await confirmationModal.Result;
    }
}